[
{
	"uri": "//localhost:1313/vi/",
	"title": "CS50 Tuần 2",
	"tags": [],
	"description": "",
	"content": "CS50 Tuần 2 - Mảng Tổng quan Chào mừng đến với tuần thứ hai của CS50. Trong tuần này, chúng ta sẽ khám phá khái niệm \u0026ldquo;mảng\u0026rdquo;. Hiểu khái niệm mảng sẽ giúp chúng ta giải quyết các bài toán phức tạp một cách hiệu quả hơn. Chúng ta sẽ đi qua những nội dung sau đây.\nMục lục Giới-thiệu Bộ-nhớ Chuỗi Đối-số-dòng-lệnh Trạng-thái-kết-thúc Mật-mã-học "
},
{
	"uri": "//localhost:1313/vi/1-arrays/",
	"title": "Mảng",
	"tags": [],
	"description": "",
	"content": "Mảng là một danh sách các giá trị được lưu trữ liên tiếp trong bộ nhớ máy tính.\nĐể tạo một mảng trong ngôn ngữ C, đầu tiên xác định kiểu dữ liệu cho mảng và tạo một tên cho mảng đó. Sau đó thêm vào [] số lượng phần tử mà mảng có thể chứa. Cuối cùng thêm các phần tử vào mảng theo số chỉ mục. Chỉ số mảng bắt đầu từ 0: [0] sẽ là phần tử đầu tiên, [1] là phần tử thứ hai,\u0026hellip;\nVí dụ tạo mảng scores:\nint scores[3]; scores[0] = get_int(\u0026#34;Điểm: \u0026#34;); scores[1] = get_int(\u0026#34;Điểm: \u0026#34;); scores[2] = get_int(\u0026#34;Điểm: \u0026#34;) int scores[3] thông báo trình biên dịch cung cấp ba vị trí liền kề trong bộ nhớ có kích thước int là số nguyên để lưu trữ ba phần tử scores.\nSau đó chúng ta dùng get_int để lấy Điểm gán cho các phần tử scores.\nChúng ta còn có thể cải thiện mã thành:\nint scores[3]; for (int i = 0; i \u0026lt; 3; i++) { scores[i] = get_int(\u0026#34;Điểm: \u0026#34;); } Số chỉ mục i sẽ lặp 0 → 2 để lấy ba phần tử của mảng scores\n"
},
{
	"uri": "//localhost:1313/vi/2-memory/",
	"title": "Bộ nhớ",
	"tags": [],
	"description": "",
	"content": "Bên trong máy tính, chúng ta có một lượng bộ nhớ hữu hạn. Mỗi kiểu dữ liệu yêu cầu một lượng tài nguyên hệ thống nhất định:\nbool 1 byte int 4 bytes long 8 bytes float 4 bytes double 8 bytes char 1 byte Ta có thể tưởng tượng một char (kiểu dữ liệu ký tự) sẽ cần 1 byte trong bộ nhớ, giống như trong ảnh:\nTương tự, một int (kiểu dữ liệu số nguyên) sẽ cần 4 byte:\n"
},
{
	"uri": "//localhost:1313/vi/3-strings/",
	"title": "Chuỗi",
	"tags": [],
	"description": "",
	"content": "Chuỗi Chuỗi có thể hiểu đơn giản là một mảng các ký tự.\nCó thể hình dung chuỗi là một mảng bắt đầu bằng một ký tự và kết thúc bằng ký tự kết thúc đặc biệt NUL character \\0\nVí dụ về chuỗi trong đoạn mã sau:\n#include \u0026lt;cs50.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(void) { string s = \u0026#34;HI!\u0026#34;; printf(\u0026#34;%c%c%c\\n\u0026#34;, s[0], s[1], s[2]); } Chuỗi s là một mảng gồm 3 ký tự: H I !\nChúng ta có thể thao tác với chuỗi như đo độ dài chuỗi, chuyển đổi giữa chữ viết hoa và viết thường bằng cách dùng các mã được viết sẵn trong các thư viện tiêu đề.\nĐo độ dài chuỗi Chúng ta sẽ dùng hàm strlen() trong thư viện tiêu đề string.h để đo độ dài chuỗi. Ví dụ:\n#include \u0026lt;cs50.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(void) { // Yêu cầu người dùng nhập tên string name = get_string(\u0026#34;Tên: \u0026#34;); int length = strlen(name); printf(\u0026#34;%i\\n\u0026#34;, length); } Hàm strlen() sẽ tính toán độ dài của chuỗi được truyền vào.\nChữ hoa và chữ thường Dùng hàm toupper() function in the ctype.h library to convert string into upper case. For example:\n#include \u0026lt;cs50.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(void) { string s = get_string(\u0026#34;Viết thường: \u0026#34;); printf(\u0026#34;Viết hoa: \u0026#34;); for (int i = 0, n = strlen(s); i \u0026lt; n; i++) { printf(\u0026#34;%c\u0026#34;, toupper(s[i])); } printf(\u0026#34;\\n\u0026#34;); } Hàm này sẽ lấy chuỗi và chuyển đổi các ký tự trong đó thành chữ hoa. Tương tự, chúng ta có thể sử dụng hàm tolower() để chuyển đổi chuỗi thành chữ thường.\n"
},
{
	"uri": "//localhost:1313/vi/4-command-line-arguments/",
	"title": "Đối số dòng lệnh",
	"tags": [],
	"description": "",
	"content": "Đối số dòng lệnh là các giá trị được nhập vào sau tên của chương trình trong cửa sổ shell của hệ điều hành. Chúng có thể được sử dụng làm đầu vào để điều khiển chương trình một cách dễ dàng và linh hoạt hơn.\nCú pháp:\nint main(argc, string argv[]) {} argc (arguments count) đếm số lượng đối số được nhập vào trong câu lệnh. Giá trị của argc phải là số dương.\nargv (arguments vector) là mảng chứa các đầu vào từ dòng lệnh.\nVí dụ:\nTạo tệp argument.c và viết code như sau:\n#include \u0026lt;cs50.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(int argc, char* argv[]) { printf(\u0026#34;Bạn đã nhập %d đối số:\\n\u0026#34;, argc); for (int i = 0; i \u0026lt; argc; i++) { printf(\u0026#34;%s\\n\u0026#34;, argv[i]); } } Nhập make argument trong cửa sổ terminal để biên dịch tệp\nThử chạy chương trình bằng cách thêm đối số sau tên chương trình:\n./argument chào bạn\nThe output will be\nBạn đã nhập 3 đối số: ./argument chào bạn "
},
{
	"uri": "//localhost:1313/vi/5-exit-status/",
	"title": "Trạng thái kết thúc",
	"tags": [],
	"description": "",
	"content": "Khi một chương trình kết thúc, một mã thoát đặc biệt được cung cấp cho máy tính.\nKhi một chương trình kết thúc mà không có lỗi, mã trạng thái 0 được cung cấp cho máy tính. Thông thường, khi xảy ra lỗi dẫn đến kết thúc chương trình, mã trạng thái 1 được cung cấp cho máy tính.\nVí dụ: viết một chương trình C có tên status.c như sau:\n#include \u0026lt;cs50.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(int argc, string argv[]) { if (argc != 2) { printf(\u0026#34;Thêm một đối số dòng lệnh\\n\u0026#34;); return 1; } printf(\u0026#34;chào %s\\n\u0026#34;, argv[1]); return 0; } Sau đó, chạy chương trình bằng cách nhập ./status bạn, chúng ta sẽ nhận được mã trạng thái 0 với kết quả trả ra là chào bạn. Nếu bạn không cung cấp bất kỳ đối số nào, chẳng hạn như chỉ nhập ./status, chúng ta sẽ nhận được mã trạng thái 1 với cảnh báo Thêm một đối số dòng lệnh.\n"
},
{
	"uri": "//localhost:1313/vi/6-cryptography/",
	"title": "Mật mã học",
	"tags": [],
	"description": "",
	"content": "Mật mã học là nghệ thuật mã hóa và giải mã thông điệp. Nó được áp dụng để đảm bảo chỉ có người nhận nhất định mới có thể đọc và xử lý thông tin đó.\nNhư trong hình minh họa, văn bản gốc và một khóa được cung cấp cho bộ mã hóa, trả ra văn bản đã được mã hóa.\nKhoá là một thông số đặc biệt được truyền đến bộ mã hóa cùng với văn bản gốc. Bộ mã hóa sử dụng khóa để quyết định cách triển khai thuật toán mã hóa của nó.\nMã hóa đóng vai trò quan trọng trong việc bảo vệ dữ liệu và người dùng, đảm bảo tính bảo mật và ngăn chặn tội phạm mạng đánh cắp thông tin nhạy cảm của công ty.\nVậy là xong tuần 2 ^^\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
[
{
	"uri": "//localhost:1313/1-arrays/",
	"title": "Arrays",
	"tags": [],
	"description": "",
	"content": "Array is a linear data structure where all elements are arranged sequentially in the computer’s memory.\nTo create an array in C, define the data type and specify the name of the array, followed by square brackets [] with the number of elements of the array. Then add the elements to the array by index number. Array indexes start with 0: [0] is the first element. [1] is the second element,…\nFor example:\nint scores[3]; scores[0] = get_int(\u0026#34;Score: \u0026#34;); scores[1] = get_int(\u0026#34;Score: \u0026#34;); scores[2] = get_int(\u0026#34;Score: \u0026#34;) int scores[3] tells the compiler to provide us three back-to-back places in memory of size int to store three scores.\nThen we use get_int to get the Score and assign to the elements\nOr we can improve the code into this:\nint scores[3]; for (int i = 0; i \u0026lt; 3; i++) { scores[i] = get_int(\u0026#34;Score: \u0026#34;); } The index number i will loop from 0 → 2 to get the three elements of the array scores\n"
},
{
	"uri": "//localhost:1313/",
	"title": "CS50 Week 2",
	"tags": [],
	"description": "",
	"content": "CS50 Week 2 - Arrays Overall Welcome to the second week of CS50. In this week, we will discover the term “arrays”, which will support our goals of learning more about programming and problem-solving from the bottom up. We will go through these following contents.\nContent Introduction Memory Strings Command-Lines-arguments Exit-status Cryptography "
},
{
	"uri": "//localhost:1313/2-memory/",
	"title": "Memory",
	"tags": [],
	"description": "",
	"content": "Inside of our computer, we have a finite amount of memory available\nEach data type requires a certain amount of system resources:\nbool 1 byte int 4 bytes long 8 bytes float 4 bytes double 8 bytes char 1 byte Physically, we might imagine that a char, which requires 1 byte of memory, may look as follows:\nSimilarly, an int, which requires 4 bytes might look as follows:\n"
},
{
	"uri": "//localhost:1313/3-strings/",
	"title": "Strings",
	"tags": [],
	"description": "",
	"content": "Strings A string is simply an array of variables of type char: an array of characters.\nFor example in this image, we can see how a string is an array of characters that begins with the first character and ends with a special character called a NUL character \\0: An example of string defined in code:\n#include \u0026lt;cs50.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(void) { string s = \u0026#34;HI!\u0026#34;; printf(\u0026#34;%c%c%c\\n\u0026#34;, s[0], s[1], s[2]); } The string s is an array consists of 3 characters H I !\nWe can interact with strings like finding the length or converting into lowercase and uppercase, using pre-built code by other programmers in header files libraries.\nString length Use strlen() function in the string.h library to find the length of a string. For example:\n#include \u0026lt;cs50.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(void) { // Prompt for user\u0026#39;s name string name = get_string(\u0026#34;Name: \u0026#34;); int length = strlen(name); printf(\u0026#34;%i\\n\u0026#34;, length); } Function strlen() calculates the length of the string passed to it.\nLower and upper case Use toupper() function in the ctype.h library to convert string into upper case. For example:\n#include \u0026lt;cs50.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(void) { string s = get_string(\u0026#34;Before: \u0026#34;); printf(\u0026#34;After: \u0026#34;); for (int i = 0, n = strlen(s); i \u0026lt; n; i++) { printf(\u0026#34;%c\u0026#34;, toupper(s[i])); } printf(\u0026#34;\\n\u0026#34;); } It will get the string and convert every character in it into upper case. Similarly, can use tolower() to convert the string into lower case.\n"
},
{
	"uri": "//localhost:1313/4-command-line-arguments/",
	"title": "Command-Line Arguments",
	"tags": [],
	"description": "",
	"content": "Command-line arguments are the values given after the name of the program in the command-line shell of Operating Systems. They can be used as input to easily control the program with flexible value.\nSyntax:\nint main(argc, string argv[]) {} argc (arguments count) counts how many arguments are typed at the prompt, including the name of the program. The value of argc should be non-negative\nargv (arguments vector) is the array of inputs in the command-line\nFor example:\nCreate file argument.c and write code as below:\n#include \u0026lt;cs50.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(int argc, char* argv[]) { printf(\u0026#34;You have entered %d arguments:\\n\u0026#34;, argc); for (int i = 0; i \u0026lt; argc; i++) { printf(\u0026#34;%s\\n\u0026#34;, argv[i]); } } Type make argument in the terminal window to compile the file\nTry running the program by adding argument after the program name\n./argument hello world\nThe output will be\nYou have entered 3 arguments: ./argument hello world "
},
{
	"uri": "//localhost:1313/5-exit-status/",
	"title": "Exit status",
	"tags": [],
	"description": "",
	"content": "When a program ends, a special exit code is provided to the computer.\nWhen a program exits without error, a status code of 0 is provided to the computer. Often, when an error occurs that results in the program ending, a status of 1 is provided to the computer.\nFor example: write a C program named status.c as follow:\n#include \u0026lt;cs50.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(int argc, string argv[]) { if (argc != 2) { printf(\u0026#34;Add one command-line argument\\n\u0026#34;); return 1; } printf(\u0026#34;hello, %s\\n\u0026#34;, argv[1]); return 0; } Then run the program typing ./status mate, we will get an exit status of 0 and the output will be hello, mate. If you fail to provide any argument, such as just ./status , we will get an exit status of 1 with a warning “Add one command-line argument”.\n"
},
{
	"uri": "//localhost:1313/6-cryptography/",
	"title": "Cryptography",
	"tags": [],
	"description": "",
	"content": "Cryptography is the art of ciphering and deciphering a message. It is the practice of coding information to ensure only the person that a message was written for can read and process the information.\nAs illustrated in the image, plaintext and a key are provided to a cipher, resulting in ciphered text.\nThe key is a special argument passed to the cipher along with the plaintext. The cipher uses the key to make decisions about how to implement its cipher algorithm.\nCryptography remains important to protecting data and users, ensuring confidentiality, and preventing cyber criminals from intercepting sensitive corporate information.\nAnd that’s the end of week 2.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]